<div class="well">

  {{ form_start(form, {'attr': {'class': 'form-horizontal'}}) }}

  {# Les erreurs générales du formulaire. #}
  {{ form_errors(form) }}

  {# Génération du label + error + widget pour un champ. #}
  <div class="row text-center">
    {{ 'Vos coordonnées'|trans }}<br /><br />
  </div>
  {# Génération manuelle et éclatée : #}
  <div class="form-group">
    {# Génération du label. #}
    {{ form_label(form.customer.name, "Nom", {'label_attr': {'class': 'col-sm-2 control-label'}}) }}

    {# Affichage des erreurs pour ce champ précis. #}
    {{ form_errors(form.customer.name) }}

    <div class="col-sm-10">
      {# Génération de l'input. #}
      {{ form_widget(form.customer.name, {'attr': {'class': 'form-control'}}) }}
    </div>
  </div>

  <div class="form-group">
    {# Génération du label. #}
    {{ form_label(form.customer.firstname, "Prénom", {'label_attr': {'class': 'col-sm-2 control-label'}}) }}

    {# Affichage des erreurs pour ce champ précis. #}
    {{ form_errors(form.customer.firstname) }}

    <div class="col-sm-10">
      {# Génération de l'input. #}
      {{ form_widget(form.customer.firstname, {'attr': {'class': 'form-control'}}) }}
    </div>
  </div>
  <div class="form-group">
    {# Génération du label. #}
    {{ form_label(form.customer.mail, "Mail", {'label_attr': {'class': 'col-sm-2 control-label'}}) }}

    {# Affichage des erreurs pour ce champ précis. #}
    {{ form_errors(form.customer.mail) }}

    <div class="col-sm-10">
      {# Génération de l'input. #}
      {{ form_widget(form.customer.mail, {'attr': {'class': 'form-control'}}) }}
    </div>
  </div>
  <div class="form-group">
    {# Génération du label. #}
    {{ form_label(form.customer.adress.streetnumber, "Numéro de rue", {'label_attr': {'class': 'col-sm-2 control-label'}}) }}

    {# Affichage des erreurs pour ce champ précis. #}
    {{ form_errors(form.customer.adress.streetnumber) }}

    <div class="col-sm-10">
      {# Génération de l'input. #}
      {{ form_widget(form.customer.adress.streetnumber, {'attr': {'class': 'form-control'}}) }}
    <br /></div>
  </div>

  <div class="form-group">
    {# Génération du label. #}
    {{ form_label(form.customer.adress.streetname, "Nom de rue", {'label_attr': {'class': 'col-sm-2 control-label'}}) }}

    {# Affichage des erreurs pour ce champ précis. #}
    {{ form_errors(form.customer.adress.streetname) }}

    <div class="col-sm-10">
      {# Génération de l'input. #}
      {{ form_widget(form.customer.adress.streetname, {'attr': {'class': 'form-control'}}) }}
    </div>
  </div>

  <div class="form-group">
    {# Génération du label. #}
    {{ form_label(form.customer.adress.zipcode, "Code postal", {'label_attr': {'class': 'col-sm-2 control-label'}}) }}

    {# Affichage des erreurs pour ce champ précis. #}
    {{ form_errors(form.customer.adress.zipcode) }}

    <div class="col-sm-10">
      {# Génération de l'input. #}
      {{ form_widget(form.customer.adress.zipcode, {'attr': {'class': 'form-control'}}) }}
    </div> 
    </div> 
  <div class="form-group">
    {# Génération du label. #}
    {{ form_label(form.customer.adress.city, "Ville", {'label_attr': {'class': 'col-sm-2 control-label'}}) }}

    {# Affichage des erreurs pour ce champ précis. #}
    {{ form_errors(form.customer.adress.city) }}

    <div class="col-sm-10">
      {# Génération de l'input. #}
      {{ form_widget(form.customer.adress.city, {'attr': {'class': 'form-control'}}) }}
    </div>
  </div>
  <div class="form-group">
    {# Génération du label. #}
    {{ form_label(form.customer.adress.country, "Pays", {'label_attr': {'class': 'col-sm-2 control-label'}}) }}

    {# Affichage des erreurs pour ce champ précis. #}
    {{ form_errors(form.customer.adress.country) }}

    <div class="col-sm-10">
      {# Génération de l'input. #}
      {{ form_widget(form.customer.adress.country, {'attr': {'class': 'form-control'}}) }}
    </div>
  </div>
  <div class="row text-center">
    {{ 'Informations sur les billets'|trans }}<br /><br />
  </div>
    {# <button type="submit" id="add_ticket" class="btn btn-default">{{ 'Ajouter un billet'|trans }}</button>
  {# Génération automatique des champs pas encore écrits.
     Dans cet exemple, ce serait le champ CSRF (géré automatiquement par Symfony !)
     et tous les champs cachés (type « hidden »). #}

  {# {{ form_rest(form) }} #}
  <fieldset>
            <div id="command_tickets_list" data-prototype="{{ form_widget(form.tickets.vars.prototype)|e }}" data-widget-tags="{{ 'div'|e }}">
                {{ form_widget(form.tickets) }}
            </div>
              <div class="form-group">
                <input id="addTicket" type="button" class="btn btn-default" value="{{ 'Ajouter un billet'|trans }}" data-template="#command_tickets_list">
            </div>
  </fieldset>
  {# Pour le bouton, pas de label ni d'erreur, on affiche juste le widget #}
  {{ form_widget(form.valider, {'attr': {'class': 'btn btn-primary', 'id': 'valider' }}) }}

  {# Fermeture de la balise <form> du formulaire HTML #}
  {{ form_end(form) }}
</div>

{% block javascripts %}
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
<noscript><div class="alert alert-danger" role="alert">JavaScript est désactivé. Pour afficher toutes les informations, merci de l'activer et d'actualiser la page.</div></noscript>


<script type="text/javascript">

       /* const addTicketBtn = document.querySelector("#addTicket")

        addTicketBtn.addEventListener('click', (e) => {
            e.preventDefault()
            const list = document.querySelector(addTicketBtn.dataset.template)
            let counter = list.dataset.counter | list.children.length

            let newTicket = list.dataset.prototype
            newTicket = newTicket.replace(/__name__/g, counter)
            counter++

            list.dataset.counter = counter

            const ticketElement = document.createElement(list.dataset.widgetTags)

            ticketElement.innerHTML = newTicket

            list.appendChild(ticketElement)

            ticketElement.querySelector('.form-check-input').addEventListener('click', (e) => {
                const current = e.target // = checkbox

                const newNode = document.createElement('div')
                newNode.innerHTML = "test"
                current.parentNode.insertBefore(newNode, current.nextSibling);
            })
        });*/
</script>

{% endblock %}